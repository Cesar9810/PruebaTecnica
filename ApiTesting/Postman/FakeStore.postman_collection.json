{
	"info": {
		"_postman_id": "773f9db1-6bf5-4f15-b0c7-47521465f530",
		"name": "FakeStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28224987"
	},
	"item": [
		{
			"name": "Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Content-Type JSON\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"Response time < 1500 ms\", () => pm.expect(pm.response.responseTime).to.be.below(1500));\r",
							"\r",
							"const products = pm.response.json();\r",
							"\r",
							"pm.test(\"Body es un array con 20 productos\", () => {\r",
							"  pm.expect(products).to.be.an(\"array\");\r",
							"  pm.expect(products.length).to.equal(20);\r",
							"});\r",
							"\r",
							"const productSchema = {\r",
							"  type: \"object\",\r",
							"  required: [\"id\",\"title\",\"price\",\"description\",\"category\",\"image\",\"rating\"],\r",
							"  properties: {\r",
							"    id: { type: \"number\" },\r",
							"    title: { type: \"string\" },\r",
							"    price: { type: \"number\" },\r",
							"    description: { type: \"string\" },\r",
							"    category: { type: \"string\" },\r",
							"    image: { type: \"string\" },\r",
							"    rating: {\r",
							"      type: \"object\",\r",
							"      required: [\"rate\",\"count\"],\r",
							"      properties: { rate: { type: \"number\" }, count: { type: \"number\" } }\r",
							"    }\r",
							"  },\r",
							"  additionalProperties: true\r",
							"};\r",
							"\r",
							"pm.test(\"Cada item cumple el esquema\", () => {\r",
							"  products.forEach(p => pm.expect(tv4.validate(p, productSchema), JSON.stringify(tv4.error)).to.be.true);\r",
							"});\r",
							"\r",
							"const electronics = products.filter(p => p.category === \"electronics\");\r",
							"\r",
							"pm.test(\"Hay al menos 1 producto de 'electronics'\", () => {\r",
							"  pm.expect(electronics.length, \"No se encontraron productos 'electronics'\").to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"El subset filtrado es 100% 'electronics'\", () => {\r",
							"  electronics.forEach(p => pm.expect(p.category).to.equal(\"electronics\"));\r",
							"});\r",
							"\r",
							"if (electronics.length > 0) {\r",
							"  pm.environment.set(\"productId\", electronics[0].id);\r",
							"  pm.environment.set(\"electronicsCount\", electronics.length);\r",
							"}\r",
							"\r",
							"console.log(\"Total products:\", products.length);\r",
							"console.log(\"Electronics count:\", electronics.length);\r",
							"console.log(\"productId (electronics) ->\", pm.environment.get(\"productId\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/products"
			},
			"response": []
		},
		{
			"name": "Product Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function isUrl(str){ try{ new URL(str); return true; } catch{ return false; } }\r",
							"\r",
							"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Content-Type JSON\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"Response time < 1500ms\", () => pm.expect(pm.response.responseTime).to.be.below(1500));\r",
							"\r",
							"const categoryItems = pm.response.json();\r",
							"\r",
							"pm.test(\"Es array con al menos 1 item\", () => {\r",
							"  pm.expect(categoryItems).to.be.an(\"array\");\r",
							"  pm.expect(categoryItems.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"const productSchema = {\r",
							"  type: \"object\",\r",
							"  required: [\"id\",\"title\",\"price\",\"description\",\"category\",\"image\",\"rating\"],\r",
							"  properties: {\r",
							"    id: { type: \"number\" },\r",
							"    title: { type: \"string\" },\r",
							"    price: { type: \"number\" },\r",
							"    description: { type: \"string\" },\r",
							"    category: { type: \"string\" },\r",
							"    image: { type: \"string\" },\r",
							"    rating: {\r",
							"      type: \"object\",\r",
							"      required: [\"rate\",\"count\"],\r",
							"      properties: { rate: { type: \"number\" }, count: { type: \"number\" } }\r",
							"    }\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.test(\"Cada item cumple el esquema\", () => {\r",
							"  categoryItems.forEach(p => pm.expect(tv4.validate(p, productSchema), JSON.stringify(tv4.error)).to.be.true);\r",
							"});\r",
							"\r",
							"pm.test(\"Todos son de 'electronics'\", () => {\r",
							"  categoryItems.forEach(p => pm.expect(p.category).to.equal(\"electronics\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Campos clave válidos\", () => {\r",
							"  categoryItems.forEach(p => {\r",
							"    pm.expect(p.id).to.be.a(\"number\").and.to.be.above(0);\r",
							"    pm.expect(p.title).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(p.price).to.be.a(\"number\").and.to.be.above(0);\r",
							"    pm.expect(p.rating.rate).to.be.a(\"number\");\r",
							"    pm.expect(p.rating.count).to.be.a(\"number\").and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"if (categoryItems.length > 0) {\r",
							"  pm.environment.set(\"productId\", categoryItems[0].id);\r",
							"}\r",
							"\r",
							"console.log(\"Total electronics:\", categoryItems.length);\r",
							"console.log(\"productId seleccionado:\", pm.environment.get(\"productId\"));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/products/category/{{category}}"
			},
			"response": []
		},
		{
			"name": "Product Id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const min = 1;\r",
							"const max = 20;\r",
							"\r",
							"const randomId = Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"\r",
							"pm.environment.set(\"productId\", randomId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"function isUrl(str) {\r",
							"  try { new URL(str); return true; } catch { return false; }\r",
							"}\r",
							"\r",
							"const status = pm.response.code;\r",
							"\r",
							"if (status === 200) {\r",
							"    const product = pm.response.json();\r",
							"\r",
							"    pm.test(\"Status 200 OK\", () => pm.expect(status).to.eql(200));\r",
							"    pm.test(\"Content-Type JSON\", () => {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    });\r",
							"    pm.test(\"Tiempo de respuesta < 1500 ms\", () => {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"    });\r",
							"\r",
							"    const productSchema = {\r",
							"      type: \"object\",\r",
							"      required: [\"id\",\"title\",\"price\",\"description\",\"category\",\"image\",\"rating\"],\r",
							"      properties: {\r",
							"        id: { type: \"number\" },\r",
							"        title: { type: \"string\" },\r",
							"        price: { type: \"number\" },\r",
							"        description: { type: \"string\" },\r",
							"        category: { type: \"string\" },\r",
							"        image: { type: \"string\" },\r",
							"        rating: {\r",
							"          type: \"object\",\r",
							"          required: [\"rate\",\"count\"],\r",
							"          properties: {\r",
							"            rate: { type: \"number\" },\r",
							"            count: { type: \"number\" }\r",
							"          }\r",
							"        }\r",
							"      }\r",
							"    };\r",
							"\r",
							"    pm.test(\"Producto cumple el esquema esperado\", () => {\r",
							"        pm.expect(tv4.validate(product, productSchema), JSON.stringify(tv4.error)).to.be.true;\r",
							"    });\r",
							"\r",
							"    pm.test(\"El ID corresponde al solicitado\", () => {\r",
							"        pm.expect(product.id).to.eql(parseInt(pm.environment.get(\"productId\")));\r",
							"    });\r",
							"\r",
							"    pm.test(\"Campos clave tienen valores válidos\", () => {\r",
							"        pm.expect(product.title).to.be.a(\"string\").and.not.empty;\r",
							"        pm.expect(product.price).to.be.a(\"number\").and.to.be.above(0);\r",
							"        pm.expect(product.rating.rate).to.be.a(\"number\");\r",
							"        pm.expect(product.rating.count).to.be.a(\"number\").and.to.be.at.least(0);\r",
							"    });\r",
							"\r",
							"    pm.environment.set(\"productTitle\", product.title);\r",
							"    pm.environment.set(\"productCategory\", product.category);\r",
							"\r",
							"    console.log(\"Producto validado:\", product);\r",
							"\r",
							"}\r",
							"else if (status === 404) {\r",
							"    pm.test(\"Status 404 cuando no existe el producto\", () => pm.expect(status).to.eql(404));\r",
							"    pm.test(\"Respuesta contiene un mensaje de error\", () => {\r",
							"        const body = pm.response.text();\r",
							"        pm.expect(body.length).to.be.above(0);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Status code inesperado\", () => {\r",
							"        pm.expect.fail(`Se recibió código ${status}, esperado 200 o 404`);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/products/{{productId}}"
			},
			"response": []
		},
		{
			"name": "Product Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function isHttpUrl(u){ return /^https?:\\/\\/\\S+$/i.test(String(u).trim()); }\r",
							"\r",
							"pm.test(\"Status 201 Created\", () => pm.response.to.have.status(201));\r",
							"\r",
							"pm.test(\"Content-Type JSON\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 1500 ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"const res = pm.response.json();\r",
							"\r",
							"const createdSchema = {\r",
							"  type: \"object\",\r",
							"  required: [\"id\",\"title\",\"price\",\"description\",\"image\",\"category\"],\r",
							"  properties: {\r",
							"    id: { type: \"number\" },\r",
							"    title: { type: \"string\" },\r",
							"    price: { type: \"number\" },\r",
							"    description: { type: \"string\" },\r",
							"    image: { type: \"string\" },\r",
							"    category: { type: \"string\" }\r",
							"  },\r",
							"  additionalProperties: true\r",
							"};\r",
							"\r",
							"pm.test(\"Contrato válido (schema)\", () => {\r",
							"  pm.expect(tv4.validate(res, createdSchema), JSON.stringify(tv4.error)).to.be.true;\r",
							"});\r",
							"\r",
							"const errors = [];\r",
							"if (!(typeof res.id === \"number\" && res.id > 0)) errors.push(`id inválido: ${res.id}`);\r",
							"if (!(typeof res.title === \"string\" && res.title.trim().length > 0)) errors.push(`title inválido: '${res.title}'`);\r",
							"if (!(typeof res.price === \"number\" && res.price > 0)) errors.push(`price inválido: ${res.price}`);\r",
							"if (!(res.category === \"electronics\")) errors.push(`category inválida: '${res.category}'`);\r",
							"if (!isHttpUrl(res.image)) errors.push(`image URL inválida: '${res.image}'`);\r",
							"\r",
							"pm.test(\"Campos clave con valores válidos\", () => {\r",
							"  pm.expect(errors, errors.join(\"\\n\")).to.have.lengthOf(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Eco de title / price / description / image\", () => {\r",
							"  pm.expect(res.title).to.eql(pm.variables.get(\"newTitle\"));\r",
							"  pm.expect(res.price).to.eql(Number(pm.variables.get(\"newPrice\")));\r",
							"  pm.expect(res.description).to.eql(pm.variables.get(\"newDescription\"));\r",
							"  pm.expect(res.image).to.eql(pm.variables.get(\"newImage\"));\r",
							"});\r",
							"\r",
							"pm.environment.set(\"newProductId\", String(res.id));      // como string\r",
							"pm.environment.set(\"createdProductId\", String(res.id));  // compatibilidad\r",
							"pm.environment.set(\"createdImageUrl\", res.image);\r",
							"\r",
							"pm.test(\"ID guardado en env correctamente\", () => {\r",
							"  const idEnv = pm.environment.get(\"createdProductId\");\r",
							"  pm.expect(idEnv).to.match(/^\\d+$/, `ID inválido en env: ${idEnv}`);\r",
							"});\r",
							"\r",
							"console.log(\"Nuevo producto creado -> id:\", res.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const ts = Date.now();\r",
							"\r",
							"pm.variables.set(\"newTitle\", `QA Test Product #${ts}`);\r",
							"pm.variables.set(\"newPrice\", (100 + Math.floor(Math.random()*900)) + 0.99);\r",
							"pm.variables.set(\"newDescription\", `Producto de prueba creado desde Postman (${ts})`);\r",
							"pm.variables.set(\"newImage\", `https://picsum.photos/seed/created-${ts}/600/600`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"{{newTitle}}\",\r\n  \"price\": {{newPrice}},\r\n  \"description\": \"{{newDescription}}\",\r\n  \"image\": \"{{newImage}}\",\r\n  \"category\": \"electronics\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/products"
			},
			"response": []
		},
		{
			"name": "Product edit image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function isHttpUrl(u){ return /^https?:\\/\\/\\S+$/i.test(String(u).trim()); }\r",
							"\r",
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status 200 OK\", () => pm.response.to.have.status(200));\r",
							"pm.test(\"Content-Type JSON\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test(\"Response time < 1500 ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"const envId = pm.environment.get(\"createdProductId\") ?? pm.environment.get(\"newProductId\");\r",
							"const idFromEnv = Number(envId);\r",
							"\r",
							"pm.test(\"ID en environment es válido\", () => {\r",
							"  pm.expect(Number.isFinite(idFromEnv), `created/newProductId inválido: '${envId}'`).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"El id actualizado corresponde al producto creado\", () => {\r",
							"  pm.expect(res.id).to.eql(idFromEnv);\r",
							"});\r",
							"\r",
							"let sentImage;\r",
							"try { sentImage = JSON.parse(pm.request.body.raw).image; } catch {}\r",
							"pm.test(\"La nueva imagen es la enviada\", () => {\r",
							"  pm.expect(res.image).to.eql(sentImage);\r",
							"});\r",
							"pm.test(\"URL de imagen válida\", () => {\r",
							"  pm.expect(isHttpUrl(res.image), `image inválida: '${res.image}'`).to.be.true;\r",
							"});\r",
							"\r",
							"pm.environment.set(\"updatedImageUrl\", res.image);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"image\": \"https://picsum.photos/seed/qa/600/600\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/products/{{newProductId}}"
			},
			"response": []
		}
	]
}